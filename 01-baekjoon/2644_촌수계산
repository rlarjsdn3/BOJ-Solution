import Foundation

struct Queue<T> {
    var items: [T] = []
    
    var isEmpty: Bool {
        items.isEmpty
    }
    
    mutating func enqueue(_ element: T) {
        items.append(element)
    }
    
    mutating func dequeue() -> T {
        items.removeFirst()
    }
}

func bfs(_ tree: [[Int]], start: Int) {
    var queue = Queue<Int>()
    queue.enqueue(start)
    // 촌수로 0 대입
    degree[start] = 0
    // 큐가 빌 때까지 반복
    while !queue.isEmpty {
        let d = queue.dequeue()
        
        // 인접 노드에 방문하지 않은 경우
        for i in tree[d] where degree[i] == -1 {
            degree[i] = degree[d] + 1
            queue.enqueue(i)
        }
    }
}

// 전체 사람의 수 N 입력 받기
let n = Int(readLine()!)!
// 촌수를 구해야 하는 서로 다른 두 사람의 번호 입력 받기
let input = readLine()!.split(separator: " ").map { Int(String($0))! }
let (a, b) = (input[0], input[1])
// 관계의 개수 M 입력 받기
let m = Int(readLine()!)!
// 가계도 정보 입력 받기
var familyTree = [[Int]](repeating: [Int](), count: n + 1)
for _ in 0..<m {
    // 부모와 자식 관계 입력 받기
    let input = readLine()!.split(separator: " ").map { Int(String($0))! }
    familyTree[input[0]].append(input[1])
    familyTree[input[1]].append(input[0])
}

// 촌수 정보를 저장하는 변수
var degree = [Int](repeating: -1, count: n + 1)
// 너비 우선 탐색 수행
bfs(familyTree, start: a)
// 결과값 출력하기
if degree[b] != -1 {
    print(degree[b])
} else {
    print(-1)
}
